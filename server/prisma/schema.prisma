// This is the Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())

  email           String    @unique
  username        String
  password_hash   String

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  owned_boards    Board[]
  member_boards   Board[]   @relation("BoardMembers")
  viewed_boards   Board[]   @relation("BoardViewers")
  assigned_cards  Card[]    @relation("CardAssignees")
}

model Board {
  id              String    @id @default(uuid())
  ownerId         String

  title           String

  owner           User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members         User[]    @relation("BoardMembers")
  viewers         User[]    @relation("BoardViewers")
  columns         Column[]
  tags            Tag[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([ownerId])
}

model Column {
  id              String    @id @default(uuid())
  boardId         String
  index           Int       // Position of the column within the board

  title           String

  board           Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards           Card[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([boardId])
  @@unique([boardId, index])
}

model Card {
  id              String    @id @default(uuid())
  columnId        String
  tagId           String?

  index           Int       // Position of the card within the column
  title           String
  content         String
  startDate       DateTime?
  dueDate         DateTime?

  tag             Tag?      @relation(fields: [tagId], references: [id], onDelete: SetNull)
  column          Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  assignees       User[]    @relation("CardAssignees")

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([columnId])
  @@unique([columnId, index])
}

model Tag {
  id              String    @id @default(uuid())
  boardId         String

  name            String    @unique
  color           String    @db.VarChar(7) // Enforces max 7 characters (#RRGGBB)

  cards           Card[]
  board           Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
