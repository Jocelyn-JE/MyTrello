openapi: 3.1.0
info:
  title: MyTrello API
  version: 1.0.0
  description: API documentation for MyTrello project
tags:
  - name: documentation
    description: API documentation endpoints
  - name: users
    description: User authentication and management
  - name: boards
    description: Board management operations
servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /api-docs:
    get:
      tags:
        - documentation
      summary: Get this API documentation
      responses:
        "200":
          description: Successful response
  /api/register:
    post:
      tags:
        - users
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                username:
                  type: string
              required:
                - email
                - password
                - username
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/Error400"
        "409":
          $ref: "#/components/responses/Error409"
        "500":
          $ref: "#/components/responses/Error500"

  /api/login:
    post:
      tags:
        - users
      summary: Login as a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  user:
                    $ref: "#/components/schemas/User"
                  token:
                    type: string
        "400":
          $ref: "#/components/responses/Error400"
        "404":
          $ref: "#/components/responses/Error404"
        "401":
          $ref: "#/components/responses/Error401"
        "500":
          $ref: "#/components/responses/Error500"

  /api/users:
    get:
      tags:
        - users
      summary: Get all users
      description: Retrieve a list of all users (limited to 100, ordered by username)
      responses:
        "200":
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "500":
          $ref: "#/components/responses/Error500"

  /api/users/search:
    get:
      tags:
        - users
      summary: Search users with filters
      description: Search for users by username or email with optional ordering and count limit
      parameters:
        - name: username
          in: query
          description: Filter by username (starts with)
          schema:
            type: string
        - name: email
          in: query
          description: Filter by email (starts with)
          schema:
            type: string
        - name: order
          in: query
          description: Sort order for results
          schema:
            type: string
            enum: [asc, desc]
        - name: count
          in: query
          description: Maximum number of results to return
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: Users found successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/Error400"
        "500":
          $ref: "#/components/responses/Error500"

  /api/boards:
    post:
      tags:
        - boards
      summary: Create a new board
      description: Create a new board with title and assigned users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The board title
                users:
                  type: array
                  description: Array of users to assign to the board
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: User ID
                      role:
                        type: string
                        enum: [member, viewer]
                        description: User role on the board
                    required:
                      - id
                      - role
              required:
                - title
                - users
      responses:
        "201":
          description: Board created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Board created successfully
                  board:
                    $ref: "#/components/schemas/Board"
        "400":
          $ref: "#/components/responses/Error400"
        "401":
          $ref: "#/components/responses/Error401"
        "500":
          $ref: "#/components/responses/Error500"

    get:
      tags:
        - boards
      summary: Get user's boards
      description: Retrieve all boards where the authenticated user is owner, member, or viewer
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Boards retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Boards retrieved successfully
                  boards:
                    type: array
                    items:
                      $ref: "#/components/schemas/BoardWithUsers"
        "401":
          $ref: "#/components/responses/Error401"
        "500":
          $ref: "#/components/responses/Error500"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ErrorResponse:
      type: object
      description: Standard error payload
      required:
        - error
      properties:
        error:
          type: string
          description: Human readable error description
          example: Error XXX because of YYY
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Board:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        ownerId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    BoardWithUsers:
      allOf:
        - $ref: "#/components/schemas/Board"
        - type: object
          properties:
            owner:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                username:
                  type: string
            members:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  username:
                    type: string
            viewers:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  username:
                    type: string
  responses:
    Error400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Error401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Error403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Error404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Error409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Error500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
